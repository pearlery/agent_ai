#!/usr/bin/env python3
"""
Test script ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö GraphQL Integration ‡∏ú‡πà‡∏≤‡∏ô NATS
"""
import asyncio
import json
import sys
from pathlib import Path

# Add agntics_ai to path
sys.path.append(str(Path(__file__).parent / "agntics_ai"))

from agntics_ai.utils.nats_handler import NATSHandler
from agntics_ai.utils.graphql_publisher import init_graphql_publisher
from agntics_ai.utils.output_handler import get_output_handler


async def test_graphql_integration():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Agent AI ‡πÑ‡∏õ GraphQL ‡∏ú‡πà‡∏≤‡∏ô NATS"""
    
    print("üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö GraphQL Integration...")
    
    # NATS Configuration
    nats_config = {
        "server_url": "nats://localhost:4222",
        "stream_name": "agentAI_stream",
        "auto_open_connection": True,
        "subjects": {
            "graphql_mutation": "agentAI.graphql.mutation"
        }
    }
    
    try:
        # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ NATS
        print("üì° ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ NATS...")
        nats_handler = NATSHandler(nats_config)
        await nats_handler.connect()
        print("‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ NATS ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        
        # Initialize GraphQL Publisher
        print("üöÄ Initialize GraphQL Publisher...")
        publisher = init_graphql_publisher(nats_handler, "agentAI.graphql.mutation")
        print("‚úÖ GraphQL Publisher ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        
        # Initialize Output Handler
        print("üìù Initialize Output Handler...")
        output_handler = get_output_handler("test_output.json")
        print("‚úÖ Output Handler ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        
        # Test Session
        session_id = "test-session-001"
        
        print(f"\nüß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö session: {session_id}")
        
        # Test 1: Overview Update
        print("\n1Ô∏è‚É£ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Overview Update...")
        await publisher.publish_overview_update(
            session_id, 
            "‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Overview ‡∏ú‡πà‡∏≤‡∏ô NATS ‡πÑ‡∏õ GraphQL"
        )
        
        output_handler.update_overview(
            session_id,
            "‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Overview ‡∏ú‡πà‡∏≤‡∏ô Output Handler"
        )
        print("‚úÖ Overview Update ‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß")
        
        # Test 2: Attack Analysis Update  
        print("\n2Ô∏è‚É£ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Attack Analysis Update...")
        attack_data = [
            {
                "tacticID": "TA0001",
                "tacticName": "Initial Access",
                "confidence": 0.85
            },
            {
                "tacticID": "TA0002", 
                "tacticName": "Execution",
                "confidence": 0.92
            }
        ]
        
        await publisher.publish_attack_update(session_id, attack_data)
        output_handler.update_attack_mapping(session_id, attack_data)
        print("‚úÖ Attack Analysis Update ‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß")
        
        # Test 3: Timeline Update
        print("\n3Ô∏è‚É£ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Timeline Update...")
        timeline_data = [
            {"stage": "Received Alert", "status": "success", "errorMessage": ""},
            {"stage": "Type Agent", "status": "success", "errorMessage": ""},
            {"stage": "Analyze Root Cause", "status": "in_progress", "errorMessage": ""},
        ]
        
        await publisher.publish_timeline_update(session_id, timeline_data)
        output_handler.update_timeline(session_id, timeline_data)
        print("‚úÖ Timeline Update ‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß")
        
        # Test 4: Recommendation Update
        print("\n4Ô∏è‚É£ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Recommendation Update...")
        recommendations = [
            {
                "description": "Immediate Response",
                "content": "Block suspicious IP addresses and isolate affected systems"
            },
            {
                "description": "Investigation Path", 
                "content": "Analyze network logs for lateral movement patterns"
            }
        ]
        
        await publisher.publish_recommendation_update(session_id, recommendations)
        output_handler.update_recommendation(
            session_id,
            "Security Recommendations",
            "Detailed security recommendations based on analysis"
        )
        print("‚úÖ Recommendation Update ‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß")
        
        # Test 5: Executive Summary Update
        print("\n5Ô∏è‚É£ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Executive Summary Update...")
        await publisher.publish_executive_summary_update(
            session_id,
            "Incident Summary",
            "Critical security incident detected and analyzed. Immediate action required."
        )
        
        output_handler.update_executive_summary(
            session_id,
            "Executive Summary",
            "High-level incident overview for management"
        )
        print("‚úÖ Executive Summary Update ‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß")
        
        # Test 6: Session Management
        print("\n6Ô∏è‚É£ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Session Management...")
        await publisher.publish_session_created(session_id, {
            "alert_id": "ALERT-001",
            "alert_name": "Suspicious Process Execution",
            "severity": "High"
        })
        
        await asyncio.sleep(1)  # ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà
        
        await publisher.publish_session_completed(session_id, "completed")
        print("‚úÖ Session Management ‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß")
        
        # Test 7: Full Output Update
        print("\n7Ô∏è‚É£ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Full Output Update...")
        output_handler.save_to_file()  # ‡∏à‡∏∞ trigger full output publish
        print("‚úÖ Full Output Update ‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß")
        
        print("\nüéâ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
        print("\nüìã ‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:")
        print("1. ‡πÄ‡∏ä‡πá‡∏Ñ Frontend GraphQL Server console ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° mutation")
        print("2. ‡πÄ‡∏ä‡πá‡∏Ñ Frontend UI ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• real-time ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà")
        print("3. ‡πÄ‡∏ä‡πá‡∏Ñ‡πÑ‡∏ü‡∏•‡πå test_output.json ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà")
        
        # ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏õ‡∏¥‡∏î connection
        await asyncio.sleep(2)
        
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        # ‡∏õ‡∏¥‡∏î connection
        if 'nats_handler' in locals():
            await nats_handler.close()
            print("üîê ‡∏õ‡∏¥‡∏î NATS connection ‡πÅ‡∏•‡πâ‡∏ß")


if __name__ == "__main__":
    print("üß™ Agent AI - GraphQL Integration Test")
    print("=" * 50)
    asyncio.run(test_graphql_integration())